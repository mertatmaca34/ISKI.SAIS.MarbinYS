using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System;
using System.Collections.Generic;
using System.Windows.Forms;
using WinUI.Helpers;
using WinUI.Pages.Settings;
using Microsoft.Extensions.DependencyInjection;
using WinUI.Services;

namespace WinUI.Pages;

/// <summary>
/// A simple settings page that displays a list of generic application settings.
///
/// The rest of the WinUI pages in this repository rely on a separate designer
/// generated by Visual Studio. Because those designer files are not checked
/// into the repository, this page implements its UI entirely in code. A
/// DataGridView is used to display a two‑column table of setting names and
/// values. On load, the page populates the table with a few example
/// settings such as the application name, version and current culture. You
/// can add additional settings or change where the values come from as
/// needed.
/// </summary>
public partial class SettingsPage : UserControl
{
    private readonly DataGridView _dgvSettings;

    public SettingsPage()
    {
        // Initialise the DataGridView and other controls before wiring up
        // events.  By defining our own InitializeComponent method here
        // instead of relying on an auto‑generated designer file, we avoid
        // compile‑time dependencies on missing *.Designer.cs files.
        _dgvSettings = new DataGridView();
        InitializeComponent();

        // Populate the grid when the control is first shown.
        this.Load += SettingsPage_Load;
    }

    /// <summary>
    /// Handles the Load event for the settings page.  Here we build a
    /// collection of settings to display.  In a real application these
    /// values would likely come from configuration files, environment
    /// variables or a database.
    /// </summary>
    private void SettingsPage_Load(object sender, EventArgs e)
    {
        // Example settings – replace or extend with your own values
        var settings = new List<dynamic>
        {
            new { Name = "Uygulama Adı", Value = Application.ProductName },
            new { Name = "Sürüm", Value = Application.ProductVersion },
            new { Name = "Kültür", Value = System.Globalization.CultureInfo.CurrentCulture.DisplayName }
        };

        _dgvSettings.DataSource = settings;
    }

    private void StationButton_Click(object sender, EventArgs e)
    {
        PageManager.ShowPage(this.PanelContent, new StationSettingsPage());
    }

    private void DatabaseButton_Click(object sender, EventArgs e)
    {
        var searchEngine = Program.Services!.GetRequiredService<IDatabaseSearchEngine>();
        var selectionService = Program.Services!.GetRequiredService<IDatabaseSelectionService>();
        PageManager.ShowPage(this.PanelContent, new DatabaseSettingsPage(searchEngine, selectionService));
    }

    private void ApiButton_Click(object sender, EventArgs e)
    {
        PageManager.ShowPage(this.PanelContent, new ApiSettingsPage());
    }

    private void ButtonCalibration_Click(object sender, EventArgs e)
    {
        PageManager.ShowPage(this.PanelContent, new CalibrationSettingsPage());
    }

    private void ButtonChannels_Click(object sender, EventArgs e)
    {
        PageManager.ShowPage(this.PanelContent, new ChannelSettingsPage());
    }

    private void PlcButton_Click(object sender, EventArgs e)
    {
        PageManager.ShowPage(this.PanelContent, new PlcSettingsPage());
    }

    private void MailSettingsButton_Click(object sender, EventArgs e)
    {
        PageManager.ShowPage(this.PanelContent, new MailSettingsPage());
    }
}